#ifndef PHOLD_AGENT_H
#define	PHOLD_AGENT_H

//---------------------------------------------------------------------
//    ___
//   /\__\    This file is part of MUSE    <http://www.muse-tools.org/>
//  /::L_L_
// /:/L:\__\  Miami   University  Simulation  Environment    (MUSE)  is
// \/_/:/  /  free software: you can  redistribute it and/or  modify it
//   /:/  /   under the terms of the GNU  General Public License  (GPL)
//   \/__/    as published  by  the   Free  Software Foundation, either
//            version 3 (GPL v3), or  (at your option) a later version.
//    ___
//   /\__\    MUSE  is distributed in the hope that it will  be useful,
//  /:/ _/_   but   WITHOUT  ANY  WARRANTY;  without  even  the IMPLIED
// /:/_/\__\  WARRANTY of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR
// \:\/:/  /  PURPOSE.
//  \::/  /
//   \/__/    Miami University  and  the MUSE  development team make no
//            representations  or  warranties  about the suitability of
//    ___     the software,  either  express  or implied, including but
//   /\  \    not limited to the implied warranties of merchantability,
//  /::\  \   fitness  for a  particular  purpose, or non-infringement.
// /\:\:\__\  Miami  University and  its affiliates shall not be liable
// \:\:\/__/  for any damages  suffered by the  licensee as a result of
//  \::/  /   using, modifying,  or distributing  this software  or its
//   \/__/    derivatives.
//
//    ___     By using or  copying  this  Software,  Licensee  agree to
//   /\  \    abide  by the intellectual  property laws,  and all other
//  /::\  \   applicable  laws of  the U.S.,  and the terms of the  GNU
// /::\:\__\  General  Public  License  (version 3).  You  should  have
// \:\:\/  /  received a  copy of the  GNU General Public License along
//  \:\/  /   with MUSE.  If not,  you may  download  copies  of GPL V3
//   \/__/    from <http://www.gnu.org/licenses/>.
//
//---------------------------------------------------------------------

/* 
 * File:   PHOLDAgent.h
 * Author: Meseret Gebre
 *
 * Created on January 15, 2009, 11:04 PM
 */

#include <random>
#include "Agent.h"
#include "PholdState.h"

class PHOLDAgent : public muse::Agent {
public:
    /** Predefined enumerations for the different types of random
        number distributions for generating delays in receive time of
        events generated by this model.
    */
    enum DelayType { UNIFORM, POISSON, EXPONENTIAL, REVERSE_POISSON,
                     REVERSE_EXPONENTIAL, INVALID_DELAY };

    /** Convenience helper method to convert a given string to
        corresponding delay type enumeration value.

        \param[in] delay The delay string to be convereted to the
        corresponding delay type.  The string is converted to all
        lower-case for convenience/comparisons.

        \return Enumeration corresponding to the delay type.  If delay
        type is not know, this method returns
        PHOLDAgent::INVALID_DELAY as the type.
    */
    static DelayType toDelayType(const std::string& delay);
    
    PHOLDAgent(muse::AgentID , PholdState *,int x, int y, int n, int d,
               int lookAhead = 1, double selfEvents = 0.0,
               size_t granularity = 0,
               PHOLDAgent::DelayType delayType = UNIFORM,
               int receiverRange = 0,
               PHOLDAgent::DelayType receiverDistType = UNIFORM);

    void initialize() throw (std::exception);

    void executeTask(const muse::EventContainer* events);

    void finalize();

    /** A helper method to print the distribution of event delays.

        This is a utility method that can be used to print the
        distribution profile of the event delays generated by the
        delay and distribution patterns set for this agent.  This
        method is just an adaptation of the example(s) for different
        random number generations from http://en.cppreference.com

        \param[out] os The output stream to where the distribution is
        to be printed.
    */
    void printDelayDistrib(std::ostream& os = std::cout);
    
protected:
    /** Simulate some granularity (i.e., CPU usage) for the event.

        This method merely runs a loop generating random numbers to
        simulate some processing done for each event.  Currently, the
        granularity is a fixed value, set when an agent is created.

    */
    void simGranularity();

    /** Obtain a random delay value based on the type of distribution
        set for this sagent.

        \param[in] delType The type of distribution to be used.

        \param[in] genParam The parameter for the random distribution
        to be used.
        
        \return A random delay based on the the delay value and type
        of distribution set for this agent.
    */
    int getDelay(DelayType delType, const int genParam);

    /** Object the ID of an agent to which an event must be sent.

        This method is a refactored utility method that is used to
        determine the ID of an agent to which the next event is to be
        sent.  This method uses the information in receiverRange and
        receiverDistType to determine the receiver agent ID.

        \return The ID of the agent to which the event is to be sent.
    */
    muse::AgentID getRecvrAgentID();

    /** Convenience method to determine ID a randomly chosen adjacent
        neighbor agent in the torroidal space of agents.

        This is a refactored utility method that is used to determine
        the ID of the adjacent ID.  This method is used in cases where
        the receiverRange value is 0 (zero).  This provides the
        default behavior of PHOLD -- that is "default" behavior prior
        to May 21 2017.

        \return The ID of a randomly chosen adjacent agent to which an
        event is to be sent.
    */
    muse::AgentID getAdjacentAgentID();
    
    /** Compute the maximum possibly delay value.  This method is
        typically called only once in the constructor to determine the
        maximum delay value that can be generated to setup the
        maxDelay static instance variable in this class.

        \param[in] delayType The delay type for which the maximum
        delay is to be generated.
        
        \param[in] delay The delay value to use to generate maximum
        delay.
        
        \return The maximum delay value that is to be generated by the
        specified random number distribution.
    */
    int getMaxDelayValue(DelayType delayType, int delay) const;
        
private:
    int X,Y,N;

    int delay;

    /** The type of random number distribution to be used for
        generating delays for event receive times.  The delays are
        useful for modeling different types of behaviors in simulation
        models.  The default delay type is UNIFORM.  This value is set
        in the constructor and is never changed during the lifetime of
        this agent.
    */
    DelayType delayType;

    /** Fixed lookahead virtual time delay for generating events.
        
        The virtual time events generated by this agent have this
        fixed look ahead virtual time value added to them.
    */
    int lookAhead;

    /** Fraction of events that the agent should schedule to itself.

        This value indicates the probability that this agent should
        schedule events to itself.  This value is in the range 0.0 to
        0.99 and is used with the boolean expression ((rand() % 1000)
        / 1000.0) < selfEvents.  If the boolean expression returns
        true, then this agent schedule events to itself.  Note that at
        a given virtual time, the maximum number of self-events is
        limited by events * N.
    */
    double selfEvents;
    
    /** The random seed value that is used to determine number of
        self/other events.

        This seed is used to determine the probability with which
        agents should generate events to themselves versus other
        agents in the simulation.
    */
    unsigned int seed;

    /** The random number generator used to generate random delays for
        this agent.  The actual implementation depends on the
        implementation.
    */
    std::default_random_engine rng;
    
    /** A user-specified granularity -- that is, the number of loops
        to run for each event to add some load/granularity for each
        event.

        This instance variable is set to indicate the number of loops
        or iterations that must be executed by the agent to simulate
        some granularity, i.e., CPU used per event.
    */
    size_t granularity;

    /** The range of receiver IDs to be used to determine the
        destination receiver agent ID for each event.  The agent ID
        that is actually generated is computed as: recvAgentID =
        getAgentID() + Dist(receiverRange) - (receiverRange / 2) where
        Dist is a distribution specified in receiverDistType.

        \note if receiverRange is 0 then this method defaults to
        randomly distributing to one of the adjacent neighbors (which
        was the only option prior to Mar 21 2017).
    */
    int receiverRange;
    
    /** The type of random number distribution to be used for
        generating information about the receiving agent ID.  The
        delays are useful for modeling different types of behaviors in
        simulation models.  The default delay type is UNIFORM.  This
        value is set in the constructor and is never changed during
        the lifetime of this agent.
    */
    DelayType receiverDistType;
    
    /** The maximum delay value that can be generated by a given
        distribution.  This value is computed once (by the first agent
        created) and is used to generate reverse_poisson and
        reverse_exponential distributions.
    */
    static int maxDelay;

    /** The maximum delay value that can be generated by a given
        distribution.  This value is computed once (by the first agent
        created) and is used to generate reverse_poisson and
        reverse_exponential distributions.
    */
    static int maxRecvrRange;    
};

#endif
