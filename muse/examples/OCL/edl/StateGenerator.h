#ifndef STATE_GENERATOR_H
#define STATE_GENERATOR_H

//---------------------------------------------------------------------------
//
// Copyright (c) Miami University, Oxford, OHIO.
// All rights reserved.
//
// Miami University (MU) makes no representations or warranties about
// the suitability of the software, either express or implied,
// including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  MU shall not be liable for any damages suffered
// by licensee as a result of using, result of using, modifying or
// distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@miamioh.edu
//
//---------------------------------------------------------------------------

#include "EdlAst.h"
#include "Generator.h"

/** Generate the state definition used for heterogeneous computing.

    This class is used by the EDL code generator to generate the
    definition for the state class associated with an agent.  This
    class essentially uses a pre-set State template, replaces
    pertinent string constants, to generate the State class.
*/
class StateGenerator : public Generator {
public:
    /** A default constructor.

        The default constructor merely initializes the instance
        variables to default initial values.
    */
    StateGenerator() {}

    /** The destructor.

        The destructor does not have any special tasks to perform and
        is present merely to adhere to coding conventions.
     */
    ~StateGenerator() {}

    /** The top-level code generation method.

        This method is the primary interface method for code
        generation.  It uses the supplied ast and generates C++ code
        that uses MUSE's heterogeneous computing macros.

        \param[in] ast The abstract syntax tree to be used to generate
        a C++ simulation.

        \param[out] os The output stream to where the data is to be
        written.

        \return The name of the state class generated by this method.
    */
    std::string generateState(const EDL_AST& ast);

private:
    /** A predefined string constant that holds the state template
        source code. This string is initialized by directly including
        StateTemplate.h into the source code using raw string literal
        support introduced in C++11.  This string is used to generate
        the state from a given EDL AST.
    */
    static const std::string StateTemplate;
};

#endif
