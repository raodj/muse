#ifndef CUSTOM_FILE_DIALOG_H
#define CUSTOM_FILE_DIALOG_H

#include "FileSystemModel.h"
#include "DirFilterProxyModel.h"

#include <QDialog>
#include <QTreeView>
#include <QTableView>
#include <QComboBox>
#include <QToolBar>
#include <QLineEdit>
#include <QButtonGroup>

/**
 * @brief The CustomFileDialog class is an extension of the QFileDialog
 * class in that this class will allow the user to browse files on the
 * remote server, something that the QFileDialog does not allow for.
 */
class CustomFileDialog : public QDialog {
    Q_OBJECT
public:
    /**
     * @brief CustomFileDialog Constructor for the MUSE file dialog,
     * creates a file dialog view essentially from scratch.
     * @param parent The parent widget this CustomFileDialog belongs
     * to.
     * @param dirPath The starting directory for the dialog to display
     * upon launching.
     */
    explicit CustomFileDialog(QWidget *parent = 0,
                              const QString& dirPath = QString::null);

    /**
     * @brief setFileFilters Adds the desired file filters to the
     * listing of file filters in the QComboBox.
     * @param filters
     */
    void setFileFilters(const QStringList& filters);

    /**
     * @brief setCurrentDir Sets the current directory in the view.
     * @param treeIndex The index of the tree that is to be the
     * current directory.
     * @return If the tree index is the current index
     */
    bool setCurrentDir(const QModelIndex &treeIndex);

    /**
     * @brief getDirIndex Returns the ModelIndex of the given directory
     * path.
     * @param dirPath The directory path chosen by the user.
     * @return The index of the directory in the Model.
     */
    QModelIndex getDirIndex(const QString& dirPath = "");

    /**
     * @brief loadSetCurrentDir Loads the currently set directory.
     * @param dirPath The currently set directory.
     * @return A boolean indicating whether or not
     * the directory was loaded.
     */
    bool loadSetCurrentDir(const QString& dirPath);

protected:
    /**
     * @brief createToolBar Creates the toolbar for the top of the file
     * dialog.
     * @return A pointer to the created toolbar.
     */
    QToolBar* createToolBar();

    /**
     * @brief configureTreeView Configures the tree view for the file
     * dialog so the user can view the file system as a tree.
     */
    void configureTreeView();

    /**
     * @brief configureTableView Configures the table view for the
     * file dialog so the user can view the file system as a table.
     */
    void configureTableView();

    /**
     * @brief addToolButton Adds a QPushButton to the toolbar. The button
     * is built from the parameters of this method.
     *
     * @param toolBar The toolbar the button will be added to once
     * created.
     *
     * @param iconName The alias name of the icon for the PushButton,
     * as specified in the QRC file.
     *
     * @param slotMember The slot method that this button will be
     * connected to.
     *
     * @param toolTip The toolTip to be displayed when the user hovers
     * over the icon or otherwise triggers the tooltip from the gui
     *
     * @return A pointer to the QPushButton that was created.
     */
    QPushButton* addToolButton(QToolBar* toolBar, const QString& iconName,
                               const char* slotMember,
                               const QString& toolTip = "");

    /**
     * @brief configureBottomPanel Sets up the bottom portion of the
     * CustomFileDialog, namely, the file name entry and file fliter
     * selectors, as well as the open and close buttons.
     * @return The layout generated by this method.
     */
    QLayout* configureBottomPanel();

    /**
     * @brief showEvent Shows the selected file and its folders
     * using loadSetCurrentDir().
     *
     * @see loadSetCurrentDir()
     *
     * @param se The show event, which will get passed to the
     * QDialog base class so it can do its job first.
     */
    void showEvent(QShowEvent *se);

    /**
     * @brief updatePathComboBoxEntries Updates the list of directories
     * in the comboBox based on the directory the user has entered.
     * @param dir The directory that the user is in.
     */
    void updatePathComboBoxEntries(const QModelIndex& dir);

protected slots:
    /**
     * @brief treeEntrySelected Sets the focus of the
     * CustomFileDialog to the selected file/folder in the tree view.
     * @param selected The file/folder that was selected.
     * @param deselected The file/folder that was deselected.
     */
    void treeEntrySelected(const QItemSelection& selected,
                           const QItemSelection& deselected);

    /**
     * @brief tableEntrySelected Sets the focus of the
     * CustomFileDialog to the selected file/folder in
     *  the table view.
     * @param selected The file/folder that was selected.
     * @param deselected The file/folder that was deselected.
     */
    void tableEntrySelected(const QItemSelection& selected,
                            const QItemSelection& deselected);

    /**
     * @brief tableEntryDoubleClicked First checks to see if the
     * item that was double-clicked is a directory. If it is, the
     * treeView is updated to show the directory in its expanded
     * form.
     *
     * @param index The index of the item in the table that was
     * double-clicked.
     */
    void tableEntryDoubleClicked(const QModelIndex& index);

    /**
     * @brief updateComboBox Updates the comboBox with new directory entries.
     * @param dir The directory the user is currently focused on.
     */
    void updateComboBox(QModelIndex dir);

    /**
     * @brief dirComboBoxActivated Sets the currentIndex of the
     * treeView if the item selected in the comboBox is valid.
     * @param index The index of the item selected in the
     * comboBox.
     */
    void dirComboBoxActivated(int index);

    /**
     * @brief fileFilterSelected Applies the selected filter, or disables
     * it, as selected by the user.
     * @param index The filter option selected in the QComboBox.
     */
    void fileFilterSelected(int index);

    /**
     * @brief toParentDir Navigates to the parent directory.
     */
    void toParentDir();

    /**
     * @brief toHomeDir Navigates to the user's home directory.
     */
    void toHomeDir();

    /**
     * @brief selectLocalFS Sets up the local file system.
     */
    void selectLocalFS();

    /**
     * @brief selectRemoteFS Sets up the file system on the remote
     * machine by first trying to connect to the server.
     */
    void selectRemoteFS();

    /**
     * @brief refresh Refreshes the view in this file dialog.
     */
    void refresh();

    /**
     * @brief updating Provides visual indications to the user that
     * this CustomFileDialog is updating its view.
     * @param parent The parent QModelIndex...
     * @param doneLoading Whether or not the background loading job
     * is still executing or not.
     * @param busyFlag Whether or not the dialog is busy.
     */
    void updating(const QModelIndex& parent, bool doneLoading,
                  bool busyFlag);

private:
    QTreeView treeView;
    QTableView tableView;
    FileSystemModel fsm;
    DirFilterProxyModel dirFilter;
    DirFilterProxyModel fileFilter;

    // Widgets in tool bar at top of dialog
    QAction *refreshButton;
    QComboBox dirSelector;
    QPushButton *toParentBtn;
    QButtonGroup viewButtons;

    // Fields in the bottom bialog
    QComboBox fileFilters;
    QComboBox path;

    // Fields for asynchrnously loading and setting current directory
    QString dirToLoad;
};

#endif // CUSTOM_FILE_DIALOG_H
